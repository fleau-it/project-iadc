version: '3'

services:
  traefik22-rv-proxy:
    image: "traefik:v2.2"
    #container_name: "traefik22-rv-proxy"
    container_name: "tr22-rvp"
    command:      
      #- "--" #
      - "--log.level=DEBUG" # Config Log ; niveau d'informations ()
      #- "--log.format=json" # Config Log ; Format des logs (classique ou json)
      - "--log.filePath=/var/log/traefik-log/traefik.log" # Config Log
      - "--accesslog=true" # Config Access Log
      - "--accesslog.filepath=/var/log/traefik-log/access.log" # Config Access Log
      - "--accesslog.bufferingsize=100" # Config Access Log, number of log lines Traefik will keep in memory before writing them to the selected output
      - "--api.dashboard=true" # Activation du dashboard
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false" # Défini si Traefik ajoute automatiquement ou non les conteneurs en backfront
      # Implique d'ajouter traefik.enable=true dans la catégorie label de chaque conteneur déployé si exposedbydefault=false
      #- "--providers.docker.watch" # Pour Docker Swarm
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--entrypoints.web.address=:80" #Config de base
      - "--entrypoints.websecure.address=:443" #Config de base
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true" #Config ACME HTTP Challenge : Enable a http challenge named "myresolver"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web" #Config ACME HTTP Challenge : Tell it to use our predefined entrypoint named "web"
      - "--certificatesresolvers.myresolver.acme.caserver=https://acme-v02.api.letsencrypt.org/directory" #Certificat pour phase prod
      #- "--certificatesresolvers.myresolver.acme.caserver=https://acme-v02.api.letsencrypt.org/acme/acct/87563063" #Certificat pour phase prod
      #- "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory" #Certificat pour phase Dev/test
      - "--certificatesresolvers.myresolver.acme.email=florian.leau@gmail.com" #Config ACME : The email to provide to let's encrypt
      #- "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json" #Config ACME
      - "--certificatesresolvers.myresolver.acme.storage=/acme.json" #Config ACME ; emplacement interne de stockage des certificats
      #- "--certificatesresolvers.myresolver.acme.storage=acme.json" #Config ACME
      #- "--certificatesresolvers.myresolver.acme.tlschallenge=true" #Config ACME
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure" # Global HTTP to HTTPS redirection, static configuration
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https" # Global HTTP to HTTPS redirection, static configuration
      # Tests config gestion port 1433 pour routage MSSQL
      #- "--entrypoints.mssql.address=:1433" #testFL"
      # Tests config metrics Prometheus
      - "--metrics=true" # Activation des metrics
      - "--metrics.prometheus=true" # Activation de Prometheus
      - "--metrics.prometheus.buckets=0.10, 0.30, 1.20, 5.00" # Buckets for latency metrics ; Optional, Default="0.100000, 0.300000, 1.200000, 5.000000"
      - "--metrics.prometheus.addEntryPointsLabels=true" # Enable metrics on entry points ; Optional, Default=true
      - "--metrics.prometheus.addServicesLabels=true" # Enable metrics on services
      - "--entryPoints.metrics.address=:8082" # Entry point used to expose metrics
      - "--metrics.prometheus.entryPoint=metrics" # Entry point used to expose metrics
      - "--metrics.prometheus.manualrouting=false" # If manualRouting is true, it disables the default internal router in order to allow one to create a custom router for the prometheus@internal service
      # Tests config gestion port 9090 et 3000 pour routage Prometheus et Grafana
      #- "--entrypoints.prometheus.address=:9090"
      #- "--entrypoints.grafana.address=:3000"
    labels:
      # HTTP to HTTPS redirection
      - "traefik.http.routers.http_catchall.rule=HostRegexp(`{any:.+}`)"
      - "traefik.http.routers.http_catchall.entrypoints=web"
      - "traefik.http.routers.http_catchall.middlewares=https_redirect"
      - "traefik.http.middlewares.https_redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.https_redirect.redirectscheme.permanent=true"
      # Dashboard sécurisé
      - "traefik.enable=true"
      #- "traefik.http.routers.api.rule=Host(`todocenter.fr`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))" #OK
      - "traefik.http.routers.api.rule=Host(`traefik.todocenter.fr`)" #OK
      - "traefik.http.routers.api.service=api@internal" #OK
      - "traefik.http.routers.api.entrypoints=websecure" #OK
      - "traefik.http.routers.api.tls.certresolver=myresolver" #OK
      - "traefik.http.routers.api.middlewares=auth" #Parti authentification : OK
      - "traefik.http.middlewares.auth.basicauth.users=ato:$$apr1$$v2/bgiLv$$GdA.vfWNBj0SrWYTF2vek/" #Parti authentification : OK ; login/mdp pour accès au dashboard : ato/ato ; traefik.todocenter.fr
    ports:
      - "80:80"
      - "443:443"
      #- "8080:8080"
      #- "1433:1433" #MSSQL
    volumes:
      #- "/root/traefik-v22:/letsencrypt"
      - "/root/traefik-v22/acme.json:/acme.json" # Correspondance des dossiers de stockage réel et conteneur des certificats 
      #- "./letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "/usr/share/zoneinfo:/usr/share/zoneinfo:ro"
      - "./traefik-log:/var/log/traefik-log" # Correspondance des dossiers de stockage réel et conteneur des logs
    networks:
      - traefik-net
      #- inbound

  nginx:
    image: nginx:latest
    restart: always
    container_name: "nginx-todo"
    labels:
      - "traefik.enable=true"
      #- "traefik.http.routers.nginx.rule=Host(`traefik-nginx.atomikcactus.net`)"
      #- "traefik.http.routers.nginx.entrypoints=websecure"
      #- "traefik.http.routers.nginx.tls.certresolver=myresolver"
      #traefik.http.routers.nginx.rule: Host(`traefik-nginx.atomikcactus.net`)
      #traefik.http.routers.nginx.entrypoints: web
      #- "traefik.http.routers.nginx.rule=Host(`todocenter.fr`)"
      #- "traefik.http.routers.nginx.entrypoints=web"
      #traefik.http.routers.nginx.middlewares: https_redirect
      #traefik.http.routers.nginxsecured.rule: Host(`traefik-nginx.atomikcactus.net`)
      #traefik.http.routers.nginxsecured.entrypoints: websecure
      #traefik.http.routers.nginxsecured.tls: true
      - "traefik.http.routers.nginxsec.rule=Host(`todocenter.fr`)"
      - "traefik.http.routers.nginxsec.entrypoints=websecure"
      - "traefik.http.routers.nginxsec.tls=true"
      - "traefik.http.routers.nginxsec.tls.certresolver=myresolver"
    networks:
      - traefik-net 

  prometheus:
    image: prom/prometheus:v2.11.1 #prom/prometheus:v2.19.2
    container_name: prometheus
    #deploy:
    #  replicas: 1
    #ports:
    #  - "9090:9090"
    volumes:
      - prometheus-data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./alertmanager/alert.rules/alerts.rules.yml:/alertmanager/alert.rules/alerts.rules.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=365d'
      #- '--web.console.libraries=/usr/share/prometheus/console_libraries'
      #- '--web.console.templates=/usr/share/prometheus/consoles'
    #network_mode: "host"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheussec.service=prometheus"
      - "traefik.http.services.prometheussec.loadbalancer.server.port=9090"
      #- "traefik.port=9090"
      #- "traefik.docker.network=inbound"
      #- "traefik.http.routers.prometheus.rule=Host(`prometheus.todocenter.fr`)"
      #- "traefik.http.routers.prometheus.entrypoints=web"
      - "traefik.http.routers.prometheussec.rule=Host(`prometheus.todocenter.fr`)"
      - "traefik.http.routers.prometheussec.entrypoints=websecure"
      #- "traefik.http.middlewares.prometheus.redirectscheme.port=9090"
      #- "traefik.http.middlewares.prometheussec.redirectscheme.port=9090"
      - "traefik.http.routers.prometheussec.tls=true"
      - "traefik.http.routers.prometheussec.tls.certresolver=myresolver"
    networks:
      - traefik-net

  grafana:
    image: grafana/grafana:6.2.5 #grafana/grafana:7.0.5
    container_name: grafana
    environment:
      - GF_PATHS_CONFIG=/etc/grafana/grafana.ini
    #deploy:
    #  replicas: 1
    #ports:
    #  - "3000:3000"
    depends_on:
      - prometheus
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
      - ./grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    #network_mode: "host"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafanasec.service=grafana"
      - "traefik.http.services.grafanasec.loadbalancer.server.port=3000"
      - "traefik.port=3000"
      #- "traefik.docker.network=inbound"
      #- "traefik.http.routers.grafana.rule=Host(`grafana.todocenter.fr`)"
      #- "traefik.http.routers.grafana.entrypoints=web"
      - "traefik.http.routers.grafanasec.rule=Host(`grafana.todocenter.fr`)"
      - "traefik.http.routers.grafanasec.entrypoints=websecure"
      #- "traefik.http.middlewares.grafana.redirectscheme.port=3000"
      #- "traefik.http.middlewares.grafanasec.redirectscheme.port=3000"
      - "traefik.http.routers.grafanasec.tls=true"
      - "traefik.http.routers.grafanasec.tls.certresolver=myresolver"
    #user: "104" #Tentative de résolution du problème de droit d'accès sur le dossier /var/lib/grafana
    networks:
      - traefik-net

  alertmanager:
    image: prom/alertmanager:v0.18.0 #prom/alertmanager:v0.21.0
    container_name: alertmanager
    #deploy:
    #  replicas: 1
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - ./alertmanager/templates/default.tmpl:/etc/alertmanager/templates/default.tmpl
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
    #network_mode: "host"
    ports:
      - ":9093"
    labels:
      - "traefik.enable=true"
    networks:
      - traefik-net

  blackbox:
    image: prom/blackbox-exporter:v0.14.0 #v0.17.0
    container_name: blackbox_exporter
    #deploy:
    #  replicas: 1
    volumes:
    - ./blackbox:/config
    #network_mode: "host"
    ports:
      - ":9115"
    labels:
      - "traefik.enable=true"
    networks:
      - traefik-net

  node_exporter:
    image: prom/node-exporter:v0.18.1 #prom/node-exporter:v1.0.1
    container_name: node_exporter
    #deploy:
    #  replicas: 1
    #network_mode: "host"
    ports:
      - ":9100"
    labels:
      - "traefik.enable=true"
    networks:
      - traefik-net

  netdata:
    image: netdata/netdata
    container_name: netdata
    hostname: example.com # set to fqdn of host
    #ports:
    #  - "19999:19999"
    restart: unless-stopped
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    volumes:
      - netdatalib:/var/lib/netdata
      - netdatacache:/var/cache/netdata
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/os-release:/host/etc/os-release:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.netdatasec.rule=Host(`netdata.todocenter.fr`)"
      - "traefik.http.routers.netdatasec.entrypoints=websecure"
      - "traefik.http.routers.netdatasec.tls=true"
      - "traefik.http.routers.netdatasec.tls.certresolver=myresolver"
      #- "traefik.http.middlewares.netdatasec.redirectscheme.port=19999"
      #- "traefik.http.routers.grafanasec.service=grafana"
      - "traefik.http.services.netdatasec.loadbalancer.server.port=19999"
    networks:
      - traefik-net

volumes:
  prometheus-data:
    #driver: local
    #driver_opts:
    #  o: bind
    #  type: none
    #  device: /opt/dockerflproject/08-prometeus-grafana/prometheus-data

  grafana-data:
    #driver: local
    #driver_opts:
    #  o: bind
    #  type: none
    #  device: /opt/dockerflproject/08-prometeus-grafana/grafana-data

  netdatalib:
  netdatacache:

networks:
  traefik-net:
    external: true
  inbound:
    external: true
    #driver: overlay
    #name: inbound